Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM 

Methodology:
    - No powerpoints
    - 100% hands on driven

Repository:
    https://github.com/tkmagesh/IBM-AdvGo-Dec-2022

About You:
    Name
    Total Experience
    Experience in Golang
    Specific Expectations
        Interfaces
        Goroutines
        Profiling
        GRPC
        Rest API
        Testing
    Have you attended MY golang basics class? ( 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1)


Quality of the Code?
    Decoupled
    Easy to change
    Reusable
    Extensible

    Open Closed Principle
        Open for extension but Closed for modification

Concurrency
    Concurrency is the ability to have more than one execution path

    Detecting data races
        go run --race <program.go>
        go build --race <program.go> // DO NOT do this for production build

    Channel
        A data type for enabling communication between goroutines

        Declaration
            var ch chan int

        Instantiation
            ch = make(chan int)

        Operations (<- operator)
            Send
                ch <- data
            Receive
                data := <-ch

        Behavior:
            A RECEIVE operation is ALWAYS a blocking operation

            A SEND operation is BLOCKED until a RECEIVE operation is initiated (Conditions apply)

Concurrency Patterns
    1. Worker
    2. Pool
        Help us Minimize (Not Restrict) the # of resources created
        Pool Size => How many object that can be maintained by the pool for reuse

        Acquire()
            Check if the resource is in the pool
                If yes, return the resource from the pool
                else
                    Get the resource from the factory and return
        Release()
            Check if the pool is empty enough to keep the resource
                If yes, keep the resource in the pool
                else
                    discard the resource

        Close()
            discard all the resources in the pool
            shutdown the pool
    3. Runner

Context
    Used for signaling across goroutines
    Hierarchy of contexts
    Can be used to share data across goroutines

    Root Context
        context.Background()

    Child Contexts
        context.WithCancel()
            - used to programmatically send a "cancel" signal

        context.WithTimeout() & context.WithDeadline()
            - automatically send "cancel" signal based on the time

        context.WithValue()
            - used to share data across hierarchy of contexts